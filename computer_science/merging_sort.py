'''
    Метод сортировки "разделяй и властвуй"
    Рекурсивно делим массив до минимально возможных значений, после чего сортируем полученные результаты
    Сложность: O(n*log(n))
    Память: O(n)
'''


def merge_sort(arr):
    # Если массив состоит из одного элемента или пуст, он уже отсортирован
    print(arr)
    if len(arr) <= 1:
        return  

    # Находим середину массива
    middle = len(arr) // 2  

    # Разделяем массив на две части: левую и правую [1,2,3,4,5,6] -> [1,2,3] [4,5,6]
    left_half = arr[:middle]  
    right_half = arr[middle:]  
    # Рекурсивно сортируем обе половины
    merge_sort(left_half) # [1, 2, 3] -> [1] [2, 3] -> [2] [3]
    merge_sort(right_half)  # [4, 5, 6] -> [4] [5, 6] -> [5] [6]

    # Объединяем отсортированные части
    i = j = k = 0  # Индексы для левой, правой и основной части массива

    # Пока не достигнут конец одной из половин, сравниваем элементы
    # i и j используются внизу благодаря замыканию
    while i < len(left_half) and j < len(right_half):
        if left_half[i] < right_half[j]:
            arr[k] = left_half[i]
            i += 1
        else:
            arr[k] = right_half[j]
            j += 1
        k += 1
    print(f'Сортировка main {arr}')

    # Добавляем оставшиеся элементы левой половины (если они есть)
    while i < len(left_half):
        arr[k] = left_half[i]
        i += 1
        k += 1
    print(f'Сортировка left {arr}')

    # Добавляем оставшиеся элементы правой половины (если они есть)
    while j < len(right_half):
        arr[k] = right_half[j]
        j += 1
        k += 1
    print(f'Сортировка right {arr}')


# Функция для вывода массива
def print_list(arr):
    print(" ".join(map(str, arr)))


# Точка входа в программу
if __name__ == '__main__':
    arr = [6, 12, 5, 10, 9, 1, 42, 44, 110, 32, 52, 52, 52]
    merge_sort(arr)
    print("Отсортированный массив:")
    print_list(arr)

